name: Pipelines
run-name: Unlock Gruntwork Pipelines
on:
  workflow_call:
    inputs:
      lock_id:
        description: "The ID of the lock, usually a GUID. This is generally found in the console output when Terraform/OpenTofu command fails due to a timeout waiting to acquire a lock. (required if not running unlock_all)"
        required: false
        type: string
      unit_path:
        description: "Path to the Terragrunt Unit directory where the lock is held (everything up to but not including terragrunt.hcl - required if not running unlock_all)"
        required: false
        type: string
      stack_path:
        description: "Path to a Terragrunt Stack directory (everything up to but not including terragrunt.stack.hcl) that generates content required to run unlock in a specified Terragrunt Unit"
        required: false
        type: string
      unlock_all:
        description: "Forcibly reset all locks by deleting the dynamodb table"
        required: false
        type: boolean

      # This field can be overriden to customize the runner used for pipelines
      # workflows.
      #
      # IMPORTANT: To use self-hosted runners this workflow must be hosted in
      # the same GitHub organization as your infra-live repository.
      # See https://docs.github.com/en/actions/using-workflows/reusing-workflows#using-self-hosted-runners
      #
      # The value must be an escaped JSON string that will be decoded to the
      # jobs.runs-on field
      # See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idruns-on
      #
      # For example:
      # - A simple github runner: "\"ubuntu-22.04\""
      # - A list of labels: "[\"self-hosted\", \"linux\"]"
      # - A map: "{group: \"ubuntu-runners\", labels: \"ubuntu-20.04-16core\"}"
      runner:
        type: string
        default: '"ubuntu-latest"'
      api_base_url:
        type: string
        default: "https://api.prod.app.gruntwork.io/api/v1"
      pipelines_binary_url:
        type: string
        default: ""
        description: "Override where we fetch pipelines from, used for internal testing"
      pipelines_cli_version:
        type: string
        default: "v0.40.2"
        description: "For Gruntwork internal testing - the version of the pipelines CLI to use"
      pipelines_actions_ref:
        type: string
        default: "v4.1.0"
        description: "For Gruntwork internal testing - the ref of the pipelines actions to use"
      pipelines_credentials_ref:
        type: string
        default: "v1.0.4"
        description: "For Gruntwork internal testing - the ref of the pipelines credentials to use"

    secrets:
      PIPELINES_READ_TOKEN:
        required: false
env:
  PIPELINES_CLI_VERSION: ${{ inputs.pipelines_cli_version }}
  PIPELINES_ACTIONS_REF: ${{ inputs.pipelines_actions_ref }}
  PIPELINES_CREDENTIALS_REF: ${{ inputs.pipelines_credentials_ref }}

jobs:
  unlock_one:
    name: Unlock a single TF State
    if: ${{ !inputs.unlock_all }}
    runs-on: ${{ fromJSON(inputs.runner) }}
    steps:
      - name: Record workflow env vars
        env:
          PIPELINES_BINARY_URL: ${{ inputs.pipelines_binary_url }}
        run: |
          time_now=$(date -u +"%s")
          echo "PIPELINES_JOB_START_TIME=$time_now" >> $GITHUB_ENV
          echo "PIPELINES_BINARY_URL=$PIPELINES_BINARY_URL" >> $GITHUB_ENV

      - name: Checkout Pipelines Credentials
        uses: actions/checkout@v4
        with:
          path: pipelines-credentials
          repository: gruntwork-io/pipelines-credentials
          ref: ${{ env.PIPELINES_CREDENTIALS_REF }}

      - name: Fetch Gruntwork Read Token
        id: pipelines-gruntwork-read-token
        uses: ./pipelines-credentials
        with:
          PIPELINES_TOKEN_PATH: "pipelines-read/gruntwork-io"
          FALLBACK_TOKEN: ${{ secrets.PIPELINES_READ_TOKEN }}
          api_base_url: ${{ inputs.api_base_url }}

      - name: Fetch Org Read Token
        id: pipelines-customer-org-read-token
        uses: ./pipelines-credentials
        with:
          PIPELINES_TOKEN_PATH: pipelines-read/${{ github.repository_owner }}
          FALLBACK_TOKEN: ${{ secrets.PIPELINES_READ_TOKEN }}
          api_base_url: ${{ inputs.api_base_url }}

      - name: Checkout Pipelines Actions
        uses: actions/checkout@v4
        with:
          path: pipelines-actions
          repository: gruntwork-io/pipelines-actions
          ref: ${{ env.PIPELINES_ACTIONS_REF }}
          token: ${{ steps.pipelines-gruntwork-read-token.outputs.PIPELINES_TOKEN }}

      - name: Check out repo code
        uses: actions/checkout@v4
        with:
          path: infra-live-repo
          fetch-depth: 0
          token: ${{ steps.pipelines-customer-org-read-token.outputs.PIPELINES_TOKEN }}

      - name: Install Mise
        id: mise-toml
        uses: jdx/mise-action@v2
        with:
          install: true
          cache: true
          version: 2025.10.0
          working_directory: "./infra-live-repo"

      - name: Test Terraform, OpenTofu and Terragrunt
        shell: bash
        working-directory: "./infra-live-repo"
        run: |
          tofu --version || true
          terraform --version || true
          terragrunt --version

      - name: Install Pipelines CLI
        uses: ./pipelines-actions/.github/actions/pipelines-install
        with:
          version: ${{ env.PIPELINES_CLI_VERSION }}
          PIPELINES_GRUNTWORK_READ_TOKEN: ${{ steps.pipelines-gruntwork-read-token.outputs.PIPELINES_TOKEN }}

      - name: Configure code auth
        uses: ./pipelines-actions/.github/actions/pipelines-code-auth
        with:
          PIPELINES_GRUNTWORK_READ_TOKEN: ${{ steps.pipelines-gruntwork-read-token.outputs.PIPELINES_TOKEN }}
          PIPELINES_CUSTOMER_ORG_READ_TOKEN: ${{ steps.pipelines-customer-org-read-token.outputs.PIPELINES_TOKEN }}

      - name: Pipelines Unlock Unit
        shell: bash
        working-directory: "./infra-live-repo"
        env:
          UNLOCK_UNIT_PATH: ${{ inputs.unit_path }}
          UNLOCK_UNIT_LOCK_ID: ${{ inputs.lock_id }}
          UNLOCK_UNIT_STACK_PATH: ${{ inputs.stack_path }}
          GH_TOKEN: ${{ steps.pipelines-customer-org-read-token.outputs.PIPELINES_TOKEN }}
        run: |
          pipelines unlock unit \
            --unit-path "$UNLOCK_UNIT_PATH" \
            --lock-id "$UNLOCK_UNIT_LOCK_ID" \
            --stack-path "$UNLOCK_UNIT_STACK_PATH" \
            --working-directory .

  unlock_all:
    name: Unlock all TF State files
    if: ${{ inputs.unlock_all }}
    runs-on: ${{ fromJSON(inputs.runner) }}
    steps:
      - name: Record workflow env vars
        env:
          PIPELINES_BINARY_URL: ${{ inputs.pipelines_binary_url }}
        run: |
          time_now=$(date -u +"%s")
          echo "PIPELINES_JOB_START_TIME=$time_now" >> $GITHUB_ENV
          echo "PIPELINES_BINARY_URL=$PIPELINES_BINARY_URL" >> $GITHUB_ENV

      - name: Checkout Pipelines Credentials
        uses: actions/checkout@v4
        with:
          path: pipelines-credentials
          repository: gruntwork-io/pipelines-credentials
          ref: ${{ env.PIPELINES_CREDENTIALS_REF }}

      - name: Fetch Gruntwork Read Token
        id: pipelines-gruntwork-read-token
        uses: ./pipelines-credentials
        with:
          PIPELINES_TOKEN_PATH: "pipelines-read/gruntwork-io"
          FALLBACK_TOKEN: ${{ secrets.PIPELINES_READ_TOKEN }}
          api_base_url: ${{ inputs.api_base_url }}

      - name: Fetch Org Read Token
        id: pipelines-customer-org-read-token
        uses: ./pipelines-credentials
        with:
          PIPELINES_TOKEN_PATH: pipelines-read/${{ github.repository_owner }}
          FALLBACK_TOKEN: ${{ secrets.PIPELINES_READ_TOKEN }}
          api_base_url: ${{ inputs.api_base_url }}

      - name: Checkout Pipelines Actions
        uses: actions/checkout@v4
        with:
          path: pipelines-actions
          repository: gruntwork-io/pipelines-actions
          ref: ${{ env.PIPELINES_ACTIONS_REF }}
          token: ${{ steps.pipelines-gruntwork-read-token.outputs.PIPELINES_TOKEN }}

      - name: Check out repo code
        uses: actions/checkout@v4
        with:
          path: infra-live-repo
          fetch-depth: 0
          token: ${{ steps.pipelines-customer-org-read-token.outputs.PIPELINES_TOKEN }}

      - name: Install Mise
        id: mise-toml
        uses: jdx/mise-action@v2
        with:
          install: true
          cache: true
          version: 2025.10.0
          working_directory: "./infra-live-repo"

      - name: Test Terraform, OpenTofu and Terragrunt
        shell: bash
        working-directory: "./infra-live-repo"
        run: |
          tofu --version || true
          terraform --version || true
          terragrunt --version

      - name: Install Pipelines CLI
        uses: ./pipelines-actions/.github/actions/pipelines-install
        with:
          version: ${{ env.PIPELINES_CLI_VERSION }}
          PIPELINES_GRUNTWORK_READ_TOKEN: ${{ steps.pipelines-gruntwork-read-token.outputs.PIPELINES_TOKEN }}

      - name: Configure code auth
        uses: ./pipelines-actions/.github/actions/pipelines-code-auth
        with:
          PIPELINES_GRUNTWORK_READ_TOKEN: ${{ steps.pipelines-gruntwork-read-token.outputs.PIPELINES_TOKEN }}
          PIPELINES_CUSTOMER_ORG_READ_TOKEN: ${{ steps.pipelines-customer-org-read-token.outputs.PIPELINES_TOKEN }}

      - name: Unlock All
        id: unlock_tables
        shell: bash
        working-directory: "./infra-live-repo"
        env:
          GH_TOKEN: ${{ steps.pipelines-customer-org-read-token.outputs.PIPELINES_TOKEN }}
        run: |
          pipelines unlock all --working-directory .

    outputs:
      reinit_unit_paths: ${{ steps.unlock_tables.outputs.pipelines_units_to_init }}

  pipelines_reinit:
    name: "Rerun init in ${{ matrix.unit_path }}"
    needs: [unlock_all]
    runs-on: ${{ fromJSON(inputs.runner) }}
    if: ${{ inputs.unlock_all }}
    strategy:
      fail-fast: false
      matrix:
        unit_path: ${{ fromJson(needs.unlock_all.outputs.reinit_unit_paths) }}
    steps:
      - name: Record workflow env vars
        env:
          PIPELINES_BINARY_URL: ${{ inputs.pipelines_binary_url }}
        run: |
          time_now=$(date -u +"%s")
          echo "PIPELINES_JOB_START_TIME=$time_now" >> $GITHUB_ENV
          echo "PIPELINES_BINARY_URL=$PIPELINES_BINARY_URL" >> $GITHUB_ENV

      - name: Checkout Pipelines Credentials
        uses: actions/checkout@v4
        with:
          path: pipelines-credentials
          repository: gruntwork-io/pipelines-credentials
          ref: ${{ env.PIPELINES_CREDENTIALS_REF }}

      - name: Fetch Gruntwork Read Token
        id: pipelines-gruntwork-read-token
        uses: ./pipelines-credentials
        with:
          PIPELINES_TOKEN_PATH: "pipelines-read/gruntwork-io"
          FALLBACK_TOKEN: ${{ secrets.PIPELINES_READ_TOKEN }}
          api_base_url: ${{ inputs.api_base_url }}

      - name: Fetch Org Read Token
        id: pipelines-customer-org-read-token
        uses: ./pipelines-credentials
        with:
          PIPELINES_TOKEN_PATH: pipelines-read/${{ github.repository_owner }}
          FALLBACK_TOKEN: ${{ secrets.PIPELINES_READ_TOKEN }}
          api_base_url: ${{ inputs.api_base_url }}

      - name: Checkout Pipelines Actions
        uses: actions/checkout@v4
        with:
          path: pipelines-actions
          repository: gruntwork-io/pipelines-actions
          ref: ${{ env.PIPELINES_ACTIONS_REF }}
          token: ${{ steps.pipelines-gruntwork-read-token.outputs.PIPELINES_TOKEN }}

      - name: Check out repo code
        uses: actions/checkout@v4
        with:
          path: infra-live-repo
          fetch-depth: 0
          token: ${{ steps.pipelines-customer-org-read-token.outputs.PIPELINES_TOKEN }}

      - name: Install Mise
        id: mise-toml
        uses: jdx/mise-action@v2
        with:
          install: true
          cache: true
          version: 2025.10.0
          working_directory: "./infra-live-repo"
      - name: Test Terraform, OpenTofu and Terragrunt
        shell: bash
        working-directory: "./infra-live-repo"
        run: |
          tofu --version || true
          terraform --version || true
          terragrunt --version
      - name: Install Pipelines CLI
        uses: ./pipelines-actions/.github/actions/pipelines-install
        with:
          version: ${{ env.PIPELINES_CLI_VERSION }}
          PIPELINES_GRUNTWORK_READ_TOKEN: ${{ steps.pipelines-gruntwork-read-token.outputs.PIPELINES_TOKEN }}

      - name: Configure code auth
        uses: ./pipelines-actions/.github/actions/pipelines-code-auth
        with:
          PIPELINES_GRUNTWORK_READ_TOKEN: ${{ steps.pipelines-gruntwork-read-token.outputs.PIPELINES_TOKEN }}
          PIPELINES_CUSTOMER_ORG_READ_TOKEN: ${{ steps.pipelines-customer-org-read-token.outputs.PIPELINES_TOKEN }}

      - name: Pipelines Reinit Unit
        shell: bash
        working-directory: "./infra-live-repo"
        env:
          UNIT_PATH: ${{ matrix.unit_path }}
          GH_TOKEN: ${{ steps.pipelines-customer-org-read-token.outputs.PIPELINES_TOKEN }}
        run: |
          pipelines unlock reinit --unit-path "$UNIT_PATH" --working-directory .
